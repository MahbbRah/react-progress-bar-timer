{"version":3,"file":"react-progress-bar-timer.cjs.production.min.js","sources":["../src/components/ProgressTimer.types.ts","../src/hooks/useTimer.ts","../src/components/ProgressTimer.tsx"],"sourcesContent":["export enum Direction {\r\n  Left = 'left',\r\n  Right = 'right'\r\n}\r\n\r\nexport enum Variant {\r\n  Fill = 'fill',\r\n  Empty = 'empty'\r\n}\r\n\r\nexport type ProgressTimerHandle = {\r\n  /** starts a stopped timer. */\r\n  start: () => void;\r\n  /** stops a running timer. */\r\n  stop: () => void;\r\n  /** restarts a running or finished timer. */\r\n  restart: () => void;\r\n};\r\n\r\n/**\r\n * Determines if the bar fills or empties\r\n * as the timer advances.\r\n *\r\n * @default 'fill'\r\n */\r\ntype BarVariant = 'empty' | 'fill';\r\n\r\n/**\r\n * The direction the bar grows toward.\r\n *\r\n * @default 'right'\r\n */\r\ntype BarDirection = 'left' | 'right';\r\n\r\ntype ProgressTimerClasses = {\r\n  /** Styles applied to the root element. */\r\n  root: string;\r\n  /** Styles applied to the progress bar container. */\r\n  progressContainer: string;\r\n  /** Styles applied to the text container. */\r\n  textContainer: string;\r\n  /** Styles applied to the progress bar. */\r\n  progress: string;\r\n  /** Styles applied to the label. */\r\n  label: string;\r\n  /** Styles applied to the time. */\r\n  time: string;\r\n  /** Styles applied when the timer has finished (used for alerting). */\r\n  finished: string;\r\n};\r\n\r\nexport type ProgressTimerProps = {\r\n  /** Direction the bar grows toward. */\r\n  direction?: BarDirection;\r\n  /** Determines if the bar fills or empties. */\r\n  variant?: BarVariant;\r\n  /** Color of the bar; background is same with lower opacity. */\r\n  color?: string;\r\n  /** Color of the label and timer. */\r\n  fontColor?: string;\r\n  /** Duration of the timer in seconds. */\r\n  duration?: number;\r\n  /** Label that describes the timer. */\r\n  label?: string;\r\n  /** Text displayed when timer is inactive (overrides label). */\r\n  buttonText?: string;\r\n  /** Styles applied to the component. */\r\n  classes?: Partial<ProgressTimerClasses>;\r\n  /** Font size of the label and timer. Progress bar scales with font size. */\r\n  fontSize?: string | number;\r\n  /** Whether the timer's duration should be shown when inactive. */\r\n  showDuration?: boolean;\r\n  /** Whether the progress bar's root element should be rounded. */\r\n  rootRounded?: boolean;\r\n  /** Whether the progress bar should be rounded. */\r\n  barRounded?: boolean;\r\n  /** Whether the timer should be started. (true = start, false = stop, null/undefined = await input). */\r\n  started?: boolean | null;\r\n  formatWithDays?: boolean | null;\r\n  /** Callback fired when the timer finishes. */\r\n  onFinish?: (label: string) => void;\r\n};","import { useEffect, useRef, useState } from 'react';\r\nimport type { UseTimerProps, TimerCallbacks } from './useTimer.types';\r\n\r\nconst useTimer = ({\r\n  duration,\r\n  onTick = () => {},\r\n  onFinish = () => {}\r\n}: UseTimerProps) => {\r\n  const [time, setTime] = useState(duration);\r\n  const [timer, setTimer] = useState<ReturnType<typeof setInterval>>();\r\n  const isRunning = Boolean(timer && time);\r\n  const callbackRef = useRef<TimerCallbacks>();\r\n\r\n  /**\r\n   * Update callback ref on changes to callback props\r\n   * to allow changes to reflect within setInterval's callback.\r\n   */\r\n  useEffect(() => {\r\n    callbackRef.current = { onTick, onFinish };\r\n  }, [onTick, onFinish]);\r\n\r\n  /**\r\n   * Starts a stopped timer.\r\n   */\r\n  const start = () => {\r\n    setTime(duration);\r\n\r\n    const timer = setInterval(() => {\r\n      callbackRef.current?.onTick?.();\r\n\r\n      setTime((prevTime) => {\r\n        const updatedTime = prevTime - 1;\r\n\r\n        if (!updatedTime) {\r\n          clearInterval(timer);\r\n          callbackRef.current?.onFinish?.();\r\n        }\r\n\r\n        return updatedTime;\r\n      });\r\n    }, 1000);\r\n\r\n    setTimer(timer);\r\n  };\r\n\r\n  /**\r\n   * Stops a running timer.\r\n   */\r\n  const stop = () => {\r\n    clearInterval(timer);\r\n    setTimer(undefined);\r\n  };\r\n\r\n  /**\r\n   * Restarts a running or finished timer.\r\n   */\r\n  const restart = () => {\r\n    setTime(0);\r\n    stop();\r\n  };\r\n\r\n  /**\r\n   * Restarts the timer if time is 0.\r\n   * This allows UI to reset visually prior to restarting.\r\n   */\r\n  const handleRestart = () => {\r\n    if (time) { return; }\r\n\r\n    start();\r\n  };\r\n\r\n  useEffect(handleRestart, [timer]);\r\n\r\n  /**\r\n   * Cleanup by clearing interval on unmount.\r\n   */\r\n  useEffect(() => () => clearInterval(timer), []);\r\n\r\n  return { time, timer, isRunning, start, stop, restart };\r\n};\r\n\r\nexport default useTimer;","import { forwardRef, ForwardedRef, useEffect, useImperativeHandle } from 'react';\r\nimport { alpha, Box, ButtonBase, Slide, Typography } from '@mui/material';\r\nimport { blue } from '@mui/material/colors';\r\nimport { makeStyles } from 'tss-react/mui';\r\nimport { keyframes } from '@emotion/react';\r\nimport {\r\n  type ProgressTimerProps,\r\n  type ProgressTimerHandle,\r\n  Direction,\r\n  Variant\r\n} from './ProgressTimer.types';\r\nimport useTimer from '../hooks';\r\n\r\nconst getRadius = (rounded: boolean) => (rounded ? 4 : 0);\r\n\r\nconst useStyles = makeStyles<{ color: string, rootRounded: boolean, barRounded: boolean }>()(\r\n  (_theme, { color, rootRounded, barRounded }) => ({\r\n    root: {\r\n      width: '100%',\r\n      borderRadius: getRadius(rootRounded)\r\n    },\r\n    progressContainer: {\r\n      flex: 1,\r\n      position: 'relative',\r\n      overflowX: 'hidden',\r\n      borderRadius: getRadius(rootRounded),\r\n      backgroundColor: alpha(color, 0.4)\r\n    },\r\n    progress: {\r\n      zIndex: 1,\r\n      inset: 0,\r\n      position: 'absolute',\r\n      transformOrigin: 'left center',\r\n      backgroundColor: color,\r\n      borderRadius: getRadius(barRounded),\r\n    },\r\n    textContainer: {\r\n      boxSizing: 'border-box',\r\n      position: 'relative',\r\n      height: '4em',\r\n      zIndex: 2,\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      gap: 4,\r\n      margin: 8,\r\n      overflowY: 'hidden',\r\n      fontWeight: 500\r\n    },\r\n    label: {\r\n      lineHeight: 'normal',\r\n      letterSpacing: '0.0285em',\r\n      fontWeight: 'inherit',\r\n      fontSize: '0.9em',\r\n      transition: 'transform 300ms cubic-bezier(0, 0, 0.2, 1) 0ms'\r\n    },\r\n    time: {\r\n      fontWeight: 'inherit',\r\n      fontSize: '2em',\r\n      lineHeight: 1\r\n    },\r\n    finished: {\r\n      animation: `${keyframes`\r\n        0% {\r\n          opacity: 0.8;\r\n          background-color: orangered;\r\n        }\r\n        `} 1s 5`\r\n    }\r\n  })\r\n);\r\n\r\nconst padTime = (num: number) => `${num}`.padStart(2, '0');\r\n\r\nconst ProgressTimer = forwardRef<ProgressTimerHandle, ProgressTimerProps>(({\r\n  direction = Direction.Right,\r\n  variant = Variant.Fill,\r\n  color = blue[700],\r\n  fontColor = '#ffffffd9',\r\n  duration = 60,\r\n  label = '',\r\n  buttonText = '',\r\n  classes = {},\r\n  fontSize,\r\n  showDuration = false,\r\n  rootRounded = true,\r\n  barRounded = false,\r\n  started,\r\n  formatWithDays = true,\r\n  onFinish = () => {}\r\n}: ProgressTimerProps, ref: ForwardedRef<ProgressTimerHandle>) => {\r\n  const { classes: styles, cx } = useStyles({ color, rootRounded, barRounded }, { props: { classes } });\r\n  const { time, timer, isRunning, start, stop, restart } = useTimer({\r\n    duration,\r\n    onFinish: () => onFinish(label || buttonText)\r\n  });\r\n\r\n  /**\r\n   * Controls timer via functions instead of \"started\" prop.\r\n   */\r\n  useImperativeHandle(ref, () => ({ start, stop, restart }));\r\n\r\n  /**\r\n   * Formats the time to mm:ss.\r\n   *\r\n   * @returns {string} the formatted time\r\n   */\r\n  const formatTime = () => `${padTime(Math.floor(time / 60))}:${padTime(time % 60)}`;\r\n\r\n  /**\r\n   * Gets the sign of the css translation that\r\n   * determines if the bar moves left or right.\r\n   *\r\n   * @returns {string} the sign\r\n   */\r\n  const getSign = () => {\r\n    const negativeDirection = timer ? Direction.Left : Direction.Right;\r\n\r\n    return direction === negativeDirection ? '-' : '';\r\n  };\r\n\r\n  /**\r\n   * Builds the progress transformation used\r\n   * to move the progress bar left or right.\r\n   *\r\n   * @returns {string} the x translation css\r\n   */\r\n  const buildProgressTransformation = () => {\r\n    const xPercentage = Boolean(timer) === (variant === Variant.Fill) ? '0%' : '100%';\r\n\r\n    return `translateX(${getSign()}${xPercentage})`;\r\n  };\r\n\r\n  /**\r\n   * Controls timer via \"started\" prop.\r\n   */\r\n  const handleStartedChange = () => {\r\n    if (started == null) { return; }\r\n\r\n    if (started) {\r\n      if (timer) {\r\n        restart();\r\n      } else {\r\n        start();\r\n      }\r\n    } else {\r\n      stop();\r\n    }\r\n  };\r\n\r\n  function formatTimedhms(seconds: number) {\r\n    var d = Math.floor(seconds / (3600 * 24));\r\n    var h = Math.floor(seconds % (3600 * 24) / 3600);\r\n    var m = Math.floor(seconds % 3600 / 60);\r\n    var s = Math.floor(seconds % 60);\r\n\r\n    var dDisplay = d > 0 ? d + (d == 1 ? \" day, \" : \" days, \") : \"\";\r\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\r\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\r\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\r\n    return dDisplay + hDisplay + mDisplay + sDisplay;\r\n  }\r\n\r\n  useEffect(handleStartedChange, [started]);\r\n\r\n  return (\r\n    <ButtonBase\r\n      className={styles.root}\r\n      aria-label={label}\r\n      onClick={timer ? stop : start}\r\n    >\r\n      <div\r\n        className={cx(\r\n          styles.progressContainer,\r\n          { [styles.finished]: !time && variant === Variant.Empty }\r\n        )}\r\n      >\r\n        <Box\r\n          className={styles.textContainer}\r\n          fontSize={fontSize}\r\n          color={fontColor}\r\n        >\r\n          {(label || (buttonText && !timer) || !time) && (\r\n            <Typography\r\n              className={styles.label}\r\n              sx={{\r\n                transform: isRunning || showDuration ? undefined : 'scale(1.86)',\r\n              }}\r\n            >\r\n              {!isRunning && buttonText ? buttonText : label}\r\n            </Typography>\r\n          )}\r\n          <Slide\r\n            direction=\"up\"\r\n            timeout={{ enter: 100, exit: 70 }}\r\n            in={showDuration || isRunning}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <Typography className={styles.time}>\r\n              {formatWithDays ? formatTimedhms(time) : formatTime()}\r\n            </Typography>\r\n          </Slide>\r\n        </Box>\r\n        <span\r\n          className={cx(\r\n            styles.progress,\r\n            { [styles.finished]: !time && variant === Variant.Fill }\r\n          )}\r\n          style={{\r\n            transform: buildProgressTransformation(),\r\n            transition: timer ? `transform ${duration}s linear 0s` : undefined\r\n          }}\r\n        />\r\n      </div>\r\n    </ButtonBase>\r\n  );\r\n});\r\n\r\nexport default ProgressTimer;\r\n"],"names":["Direction","Variant","useTimer","duration","onTick","onFinish","useState","time","setTime","timer","setTimer","isRunning","Boolean","callbackRef","useRef","useEffect","current","start","setInterval","prevTime","updatedTime","clearInterval","stop","undefined","restart","getRadius","rounded","useStyles","makeStyles","_theme","color","rootRounded","barRounded","root","width","borderRadius","progressContainer","flex","position","overflowX","backgroundColor","alpha","progress","zIndex","inset","transformOrigin","textContainer","boxSizing","height","display","flexDirection","justifyContent","alignItems","gap","margin","overflowY","fontWeight","label","lineHeight","letterSpacing","fontSize","transition","finished","animation","keyframes","padTime","num","padStart","forwardRef","ref","negativeDirection","xPercentage","seconds","d","h","m","s","direction","Right","variant","Fill","fontColor","buttonText","classes","showDuration","started","formatWithDays","blue","props","styles","cx","useImperativeHandle","_jsx","ButtonBase","className","onClick","_jsxs","Empty","Box","Typography","sx","transform","Slide","timeout","enter","exit","in","mountOnEnter","unmountOnExit","Math","floor","style","Left"],"mappings":"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"}