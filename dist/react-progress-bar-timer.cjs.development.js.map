{"version":3,"file":"react-progress-bar-timer.cjs.development.js","sources":["../src/components/ProgressTimer.types.ts","../src/hooks/useTimer.ts","../src/components/ProgressTimer.tsx"],"sourcesContent":["export enum Direction {\r\n  Left = 'left',\r\n  Right = 'right'\r\n}\r\n\r\nexport enum Variant {\r\n  Fill = 'fill',\r\n  Empty = 'empty'\r\n}\r\n\r\nexport type ProgressTimerHandle = {\r\n  /** starts a stopped timer. */\r\n  start: () => void;\r\n  /** stops a running timer. */\r\n  stop: () => void;\r\n  /** restarts a running or finished timer. */\r\n  restart: () => void;\r\n};\r\n\r\n/**\r\n * Determines if the bar fills or empties\r\n * as the timer advances.\r\n *\r\n * @default 'fill'\r\n */\r\ntype BarVariant = 'empty' | 'fill';\r\n\r\n/**\r\n * The direction the bar grows toward.\r\n *\r\n * @default 'right'\r\n */\r\ntype BarDirection = 'left' | 'right';\r\n\r\ntype ProgressTimerClasses = {\r\n  /** Styles applied to the root element. */\r\n  root: string;\r\n  /** Styles applied to the progress bar container. */\r\n  progressContainer: string;\r\n  /** Styles applied to the text container. */\r\n  textContainer: string;\r\n  /** Styles applied to the progress bar. */\r\n  progress: string;\r\n  /** Styles applied to the label. */\r\n  label: string;\r\n  /** Styles applied to the time. */\r\n  time: string;\r\n  /** Styles applied when the timer has finished (used for alerting). */\r\n  finished: string;\r\n};\r\n\r\nexport type ProgressTimerProps = {\r\n  /** Direction the bar grows toward. */\r\n  direction?: BarDirection;\r\n  /** Determines if the bar fills or empties. */\r\n  variant?: BarVariant;\r\n  /** Color of the bar; background is same with lower opacity. */\r\n  color?: string;\r\n  /** Color of the label and timer. */\r\n  fontColor?: string;\r\n  /** Duration of the timer in seconds. */\r\n  duration?: number;\r\n  /** Label that describes the timer. */\r\n  label?: string;\r\n  /** Text displayed when timer is inactive (overrides label). */\r\n  buttonText?: string;\r\n  /** Styles applied to the component. */\r\n  classes?: Partial<ProgressTimerClasses>;\r\n  /** Font size of the label and timer. Progress bar scales with font size. */\r\n  fontSize?: string | number;\r\n  /** Whether the timer's duration should be shown when inactive. */\r\n  showDuration?: boolean;\r\n  /** Whether the progress bar's root element should be rounded. */\r\n  rootRounded?: boolean;\r\n  /** Whether the progress bar should be rounded. */\r\n  barRounded?: boolean;\r\n  /** Whether the timer should be started. (true = start, false = stop, null/undefined = await input). */\r\n  started?: boolean | null;\r\n  formatWithDays?: boolean | null;\r\n  /** Callback fired when the timer finishes. */\r\n  onFinish?: (label: string) => void;\r\n};","import { useEffect, useRef, useState } from 'react';\r\nimport type { UseTimerProps, TimerCallbacks } from './useTimer.types';\r\n\r\nconst useTimer = ({\r\n  duration,\r\n  onTick = () => {},\r\n  onFinish = () => {}\r\n}: UseTimerProps) => {\r\n  const [time, setTime] = useState(duration);\r\n  const [timer, setTimer] = useState<ReturnType<typeof setInterval>>();\r\n  const isRunning = Boolean(timer && time);\r\n  const callbackRef = useRef<TimerCallbacks>();\r\n\r\n  /**\r\n   * Update callback ref on changes to callback props\r\n   * to allow changes to reflect within setInterval's callback.\r\n   */\r\n  useEffect(() => {\r\n    callbackRef.current = { onTick, onFinish };\r\n  }, [onTick, onFinish]);\r\n\r\n  /**\r\n   * Starts a stopped timer.\r\n   */\r\n  const start = () => {\r\n    setTime(duration);\r\n\r\n    const timer = setInterval(() => {\r\n      callbackRef.current?.onTick?.();\r\n\r\n      setTime((prevTime) => {\r\n        const updatedTime = prevTime - 1;\r\n\r\n        if (!updatedTime) {\r\n          clearInterval(timer);\r\n          callbackRef.current?.onFinish?.();\r\n        }\r\n\r\n        return updatedTime;\r\n      });\r\n    }, 1000);\r\n\r\n    setTimer(timer);\r\n  };\r\n\r\n  /**\r\n   * Stops a running timer.\r\n   */\r\n  const stop = () => {\r\n    clearInterval(timer);\r\n    setTimer(undefined);\r\n  };\r\n\r\n  /**\r\n   * Restarts a running or finished timer.\r\n   */\r\n  const restart = () => {\r\n    setTime(0);\r\n    stop();\r\n  };\r\n\r\n  /**\r\n   * Restarts the timer if time is 0.\r\n   * This allows UI to reset visually prior to restarting.\r\n   */\r\n  const handleRestart = () => {\r\n    if (time) { return; }\r\n\r\n    start();\r\n  };\r\n\r\n  useEffect(handleRestart, [timer]);\r\n\r\n  /**\r\n   * Cleanup by clearing interval on unmount.\r\n   */\r\n  useEffect(() => () => clearInterval(timer), []);\r\n\r\n  return { time, timer, isRunning, start, stop, restart };\r\n};\r\n\r\nexport default useTimer;","import { forwardRef, ForwardedRef, useEffect, useImperativeHandle } from 'react';\r\nimport { alpha, Box, ButtonBase, Slide, Typography } from '@mui/material';\r\nimport { blue } from '@mui/material/colors';\r\nimport { makeStyles } from 'tss-react/mui';\r\nimport { keyframes } from '@emotion/react';\r\nimport {\r\n  type ProgressTimerProps,\r\n  type ProgressTimerHandle,\r\n  Direction,\r\n  Variant\r\n} from './ProgressTimer.types';\r\nimport useTimer from '../hooks';\r\n\r\nconst getRadius = (rounded: boolean) => (rounded ? 4 : 0);\r\n\r\nconst useStyles = makeStyles<{ color: string, rootRounded: boolean, barRounded: boolean }>()(\r\n  (_theme, { color, rootRounded, barRounded }) => ({\r\n    root: {\r\n      width: '100%',\r\n      borderRadius: getRadius(rootRounded)\r\n    },\r\n    progressContainer: {\r\n      flex: 1,\r\n      position: 'relative',\r\n      overflowX: 'hidden',\r\n      borderRadius: getRadius(rootRounded),\r\n      backgroundColor: alpha(color, 0.4)\r\n    },\r\n    progress: {\r\n      zIndex: 1,\r\n      inset: 0,\r\n      position: 'absolute',\r\n      transformOrigin: 'left center',\r\n      backgroundColor: color,\r\n      borderRadius: getRadius(barRounded),\r\n    },\r\n    textContainer: {\r\n      boxSizing: 'border-box',\r\n      position: 'relative',\r\n      height: '4em',\r\n      zIndex: 2,\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      gap: 4,\r\n      margin: 8,\r\n      overflowY: 'hidden',\r\n      fontWeight: 500\r\n    },\r\n    label: {\r\n      lineHeight: 'normal',\r\n      letterSpacing: '0.0285em',\r\n      fontWeight: 'inherit',\r\n      fontSize: '0.9em',\r\n      transition: 'transform 300ms cubic-bezier(0, 0, 0.2, 1) 0ms'\r\n    },\r\n    time: {\r\n      fontWeight: 'inherit',\r\n      fontSize: '2em',\r\n      lineHeight: 1\r\n    },\r\n    finished: {\r\n      animation: `${keyframes`\r\n        0% {\r\n          opacity: 0.8;\r\n          background-color: orangered;\r\n        }\r\n        `} 1s 5`\r\n    }\r\n  })\r\n);\r\n\r\nconst padTime = (num: number) => `${num}`.padStart(2, '0');\r\n\r\nconst ProgressTimer = forwardRef<ProgressTimerHandle, ProgressTimerProps>(({\r\n  direction = Direction.Right,\r\n  variant = Variant.Fill,\r\n  color = blue[700],\r\n  fontColor = '#ffffffd9',\r\n  duration = 60,\r\n  label = '',\r\n  buttonText = '',\r\n  classes = {},\r\n  fontSize,\r\n  showDuration = false,\r\n  rootRounded = true,\r\n  barRounded = false,\r\n  started,\r\n  formatWithDays = true,\r\n  onFinish = () => {}\r\n}: ProgressTimerProps, ref: ForwardedRef<ProgressTimerHandle>) => {\r\n  const { classes: styles, cx } = useStyles({ color, rootRounded, barRounded }, { props: { classes } });\r\n  const { time, timer, isRunning, start, stop, restart } = useTimer({\r\n    duration,\r\n    onFinish: () => onFinish(label || buttonText)\r\n  });\r\n\r\n  /**\r\n   * Controls timer via functions instead of \"started\" prop.\r\n   */\r\n  useImperativeHandle(ref, () => ({ start, stop, restart }));\r\n\r\n  /**\r\n   * Formats the time to mm:ss.\r\n   *\r\n   * @returns {string} the formatted time\r\n   */\r\n  const formatTime = () => `${padTime(Math.floor(time / 60))}:${padTime(time % 60)}`;\r\n\r\n  /**\r\n   * Gets the sign of the css translation that\r\n   * determines if the bar moves left or right.\r\n   *\r\n   * @returns {string} the sign\r\n   */\r\n  const getSign = () => {\r\n    const negativeDirection = timer ? Direction.Left : Direction.Right;\r\n\r\n    return direction === negativeDirection ? '-' : '';\r\n  };\r\n\r\n  /**\r\n   * Builds the progress transformation used\r\n   * to move the progress bar left or right.\r\n   *\r\n   * @returns {string} the x translation css\r\n   */\r\n  const buildProgressTransformation = () => {\r\n    const xPercentage = Boolean(timer) === (variant === Variant.Fill) ? '0%' : '100%';\r\n\r\n    return `translateX(${getSign()}${xPercentage})`;\r\n  };\r\n\r\n  /**\r\n   * Controls timer via \"started\" prop.\r\n   */\r\n  const handleStartedChange = () => {\r\n    if (started == null) { return; }\r\n\r\n    if (started) {\r\n      if (timer) {\r\n        restart();\r\n      } else {\r\n        start();\r\n      }\r\n    } else {\r\n      stop();\r\n    }\r\n  };\r\n\r\n  function formatTimedhms(seconds: number) {\r\n    var d = Math.floor(seconds / (3600 * 24));\r\n    var h = Math.floor(seconds % (3600 * 24) / 3600);\r\n    var m = Math.floor(seconds % 3600 / 60);\r\n    var s = Math.floor(seconds % 60);\r\n\r\n    var dDisplay = d > 0 ? d + (d == 1 ? \" day, \" : \" days, \") : \"\";\r\n    var hDisplay = h > 0 ? h + (h == 1 ? \" hour, \" : \" hours, \") : \"\";\r\n    var mDisplay = m > 0 ? m + (m == 1 ? \" minute, \" : \" minutes, \") : \"\";\r\n    var sDisplay = s > 0 ? s + (s == 1 ? \" second\" : \" seconds\") : \"\";\r\n    return dDisplay + hDisplay + mDisplay + sDisplay;\r\n  }\r\n\r\n  useEffect(handleStartedChange, [started]);\r\n\r\n  return (\r\n    <ButtonBase\r\n      className={styles.root}\r\n      aria-label={label}\r\n      onClick={timer ? stop : start}\r\n    >\r\n      <div\r\n        className={cx(\r\n          styles.progressContainer,\r\n          { [styles.finished]: !time && variant === Variant.Empty }\r\n        )}\r\n      >\r\n        <Box\r\n          className={styles.textContainer}\r\n          fontSize={fontSize}\r\n          color={fontColor}\r\n        >\r\n          {(label || (buttonText && !timer) || !time) && (\r\n            <Typography\r\n              className={styles.label}\r\n              sx={{\r\n                transform: isRunning || showDuration ? undefined : 'scale(1.86)',\r\n              }}\r\n            >\r\n              {!isRunning && buttonText ? buttonText : label}\r\n            </Typography>\r\n          )}\r\n          <Slide\r\n            direction=\"up\"\r\n            timeout={{ enter: 100, exit: 70 }}\r\n            in={showDuration || isRunning}\r\n            mountOnEnter\r\n            unmountOnExit\r\n          >\r\n            <Typography className={styles.time}>\r\n              {formatWithDays ? formatTimedhms(time) : formatTime()}\r\n            </Typography>\r\n          </Slide>\r\n        </Box>\r\n        <span\r\n          className={cx(\r\n            styles.progress,\r\n            { [styles.finished]: !time && variant === Variant.Fill }\r\n          )}\r\n          style={{\r\n            transform: buildProgressTransformation(),\r\n            transition: timer ? `transform ${duration}s linear 0s` : undefined\r\n          }}\r\n        />\r\n      </div>\r\n    </ButtonBase>\r\n  );\r\n});\r\n\r\nexport default ProgressTimer;\r\n"],"names":["Direction","Variant","useTimer","duration","onTick","onFinish","useState","time","setTime","timer","setTimer","isRunning","Boolean","callbackRef","useRef","useEffect","current","start","setInterval","prevTime","updatedTime","clearInterval","stop","undefined","restart","handleRestart","getRadius","rounded","useStyles","makeStyles","_theme","color","rootRounded","barRounded","root","width","borderRadius","progressContainer","flex","position","overflowX","backgroundColor","alpha","progress","zIndex","inset","transformOrigin","textContainer","boxSizing","height","display","flexDirection","justifyContent","alignItems","gap","margin","overflowY","fontWeight","label","lineHeight","letterSpacing","fontSize","transition","finished","animation","keyframes","padTime","num","padStart","ProgressTimer","forwardRef","ref","direction","Right","variant","Fill","blue","fontColor","buttonText","classes","showDuration","started","formatWithDays","props","styles","cx","useImperativeHandle","formatTime","Math","floor","getSign","negativeDirection","Left","buildProgressTransformation","xPercentage","handleStartedChange","formatTimedhms","seconds","d","h","m","s","dDisplay","hDisplay","mDisplay","sDisplay","_jsx","ButtonBase","className","onClick","_jsxs","Empty","Box","Typography","sx","transform","Slide","timeout","enter","exit","mountOnEnter","unmountOnExit","style"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,WAAYA;EACVA,iBAAA,SAAA;EACAA,kBAAA,UAAA;AACD,CAHD,EAAYA,iBAAS,KAATA,iBAAS,KAAA,CAArB;;AAKA,WAAYC;EACVA,eAAA,SAAA;EACAA,gBAAA,UAAA;AACD,CAHD,EAAYA,eAAO,KAAPA,eAAO,KAAA,CAAnB;;ACFA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;MACfC,gBAAAA;yBACAC;MAAAA,kCAAS;2BACTC;MAAAA,sCAAW;;EAEX,gBAAwBC,cAAQ,CAACH,QAAD,CAAhC;MAAOI,IAAP;MAAaC,OAAb;;EACA,iBAA0BF,cAAQ,EAAlC;MAAOG,KAAP;MAAcC,QAAd;;EACA,IAAMC,SAAS,GAAGC,OAAO,CAACH,KAAK,IAAIF,IAAV,CAAzB;EACA,IAAMM,WAAW,GAAGC,YAAM,EAA1B;;;;;;EAMAC,eAAS,CAAC;IACRF,WAAW,CAACG,OAAZ,GAAsB;MAAEZ,MAAM,EAANA,MAAF;MAAUC,QAAQ,EAARA;KAAhC;GADO,EAEN,CAACD,MAAD,EAASC,QAAT,CAFM,CAAT;;;;;EAOA,IAAMY,KAAK,GAAG,SAARA,KAAQ;IACZT,OAAO,CAACL,QAAD,CAAP;IAEA,IAAMM,KAAK,GAAGS,WAAW,CAAC;;;MACxB,wBAAAL,WAAW,CAACG,OAAZ,0CAAqBZ,MAArB,yCAAqBA,MAArB;MAEAI,OAAO,CAAC,UAACW,QAAD;QACN,IAAMC,WAAW,GAAGD,QAAQ,GAAG,CAA/B;;QAEA,IAAI,CAACC,WAAL,EAAkB;UAAA;;UAChBC,aAAa,CAACZ,KAAD,CAAb;UACA,yBAAAI,WAAW,CAACG,OAAZ,2CAAqBX,QAArB,0CAAqBA,QAArB;;;QAGF,OAAOe,WAAP;OARK,CAAP;KAHuB,EAatB,IAbsB,CAAzB;IAeAV,QAAQ,CAACD,KAAD,CAAR;GAlBF;;;;;;EAwBA,IAAMa,IAAI,GAAG,SAAPA,IAAO;IACXD,aAAa,CAACZ,KAAD,CAAb;IACAC,QAAQ,CAACa,SAAD,CAAR;GAFF;;;;;;EAQA,IAAMC,OAAO,GAAG,SAAVA,OAAU;IACdhB,OAAO,CAAC,CAAD,CAAP;IACAc,IAAI;GAFN;;;;;;;EASA,IAAMG,aAAa,GAAG,SAAhBA,aAAgB;IACpB,IAAIlB,IAAJ,EAAU;MAAE;;;IAEZU,KAAK;GAHP;;EAMAF,eAAS,CAACU,aAAD,EAAgB,CAAChB,KAAD,CAAhB,CAAT;;;;;EAKAM,eAAS,CAAC;IAAA,OAAM;MAAA,OAAMM,aAAa,CAACZ,KAAD,CAAnB;KAAN;GAAD,EAAmC,EAAnC,CAAT;EAEA,OAAO;IAAEF,IAAI,EAAJA,IAAF;IAAQE,KAAK,EAALA,KAAR;IAAeE,SAAS,EAATA,SAAf;IAA0BM,KAAK,EAALA,KAA1B;IAAiCK,IAAI,EAAJA,IAAjC;IAAuCE,OAAO,EAAPA;GAA9C;AACD,CA5ED;;;;ACUA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD;EAAA,OAAuBA,OAAO,GAAG,CAAH,GAAO,CAArC;AAAA,CAAlB;;AAEA,IAAMC,SAAS,gBAAGC,cAAU,GAC1B,UAACC,MAAD;EAAA,IAAWC,KAAX,QAAWA,KAAX;MAAkBC,WAAlB,QAAkBA,WAAlB;MAA+BC,UAA/B,QAA+BA,UAA/B;EAAA,OAAiD;IAC/CC,IAAI,EAAE;MACJC,KAAK,EAAE,MADH;MAEJC,YAAY,EAAEV,SAAS,CAACM,WAAD;KAHsB;IAK/CK,iBAAiB,EAAE;MACjBC,IAAI,EAAE,CADW;MAEjBC,QAAQ,EAAE,UAFO;MAGjBC,SAAS,EAAE,QAHM;MAIjBJ,YAAY,EAAEV,SAAS,CAACM,WAAD,CAJN;MAKjBS,eAAe,EAAEC,cAAK,CAACX,KAAD,EAAQ,GAAR;KAVuB;IAY/CY,QAAQ,EAAE;MACRC,MAAM,EAAE,CADA;MAERC,KAAK,EAAE,CAFC;MAGRN,QAAQ,EAAE,UAHF;MAIRO,eAAe,EAAE,aAJT;MAKRL,eAAe,EAAEV,KALT;MAMRK,YAAY,EAAEV,SAAS,CAACO,UAAD;KAlBsB;IAoB/Cc,aAAa,EAAE;MACbC,SAAS,EAAE,YADE;MAEbT,QAAQ,EAAE,UAFG;MAGbU,MAAM,EAAE,KAHK;MAIbL,MAAM,EAAE,CAJK;MAKbM,OAAO,EAAE,MALI;MAMbC,aAAa,EAAE,QANF;MAObC,cAAc,EAAE,QAPH;MAQbC,UAAU,EAAE,QARC;MASbC,GAAG,EAAE,CATQ;MAUbC,MAAM,EAAE,CAVK;MAWbC,SAAS,EAAE,QAXE;MAYbC,UAAU,EAAE;KAhCiC;IAkC/CC,KAAK,EAAE;MACLC,UAAU,EAAE,QADP;MAELC,aAAa,EAAE,UAFV;MAGLH,UAAU,EAAE,SAHP;MAILI,QAAQ,EAAE,OAJL;MAKLC,UAAU,EAAE;KAvCiC;IAyC/CvD,IAAI,EAAE;MACJkD,UAAU,EAAE,SADR;MAEJI,QAAQ,EAAE,KAFN;MAGJF,UAAU,EAAE;KA5CiC;IA8C/CI,QAAQ,EAAE;MACRC,SAAS,EAAKC,iBAAL;;GA/Cb;AAAA,CAD0B,CAA5B;;AA0DA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD;EAAA,OAAiB,MAAGA,GAAH,EAASC,QAAT,CAAkB,CAAlB,EAAqB,GAArB,CAAjB;AAAA,CAAhB;;AAEA,IAAMC,aAAa,gBAAGC,gBAAU,CAA0C,iBAgBnDC,GAhBmD;;;8BACxEC;MAAAA,yCAAYxE,iBAAS,CAACyE;4BACtBC;MAAAA,qCAAUzE,eAAO,CAAC0E;0BAClB5C;MAAAA,iCAAQ6C,WAAI,CAAC,GAAD;8BACZC;MAAAA,yCAAY;6BACZ1E;MAAAA,uCAAW;0BACXuD;MAAAA,iCAAQ;+BACRoB;MAAAA,2CAAa;4BACbC;MAAAA,qCAAU;MACVlB,iBAAAA;iCACAmB;MAAAA,+CAAe;gCACfhD;MAAAA,6CAAc;+BACdC;MAAAA,2CAAa;MACbgD,gBAAAA;mCACAC;MAAAA,mDAAiB;6BACjB7E;MAAAA,wCAAW;;EAEX,iBAAgCuB,SAAS,CAAC;IAAEG,KAAK,EAALA,KAAF;IAASC,WAAW,EAAXA,WAAT;IAAsBC,UAAU,EAAVA;GAAvB,EAAqC;IAAEkD,KAAK,EAAE;MAAEJ,OAAO,EAAPA;;GAAhD,CAAzC;MAAiBK,MAAjB,cAAQL,OAAR;MAAyBM,EAAzB,cAAyBA,EAAzB;;EACA,gBAAyDnF,QAAQ,CAAC;IAChEC,QAAQ,EAARA,QADgE;IAEhEE,QAAQ,EAAE;MAAA,OAAMA,SAAQ,CAACqD,KAAK,IAAIoB,UAAV,CAAd;;GAFqD,CAAjE;MAAQvE,IAAR,aAAQA,IAAR;MAAcE,KAAd,aAAcA,KAAd;MAAqBE,SAArB,aAAqBA,SAArB;MAAgCM,KAAhC,aAAgCA,KAAhC;MAAuCK,IAAvC,aAAuCA,IAAvC;MAA6CE,OAA7C,aAA6CA,OAA7C;;;;;;EAQA8D,yBAAmB,CAACf,GAAD,EAAM;IAAA,OAAO;MAAEtD,KAAK,EAALA,KAAF;MAASK,IAAI,EAAJA,IAAT;MAAeE,OAAO,EAAPA;KAAtB;GAAN,CAAnB;;;;;;;EAOA,IAAM+D,UAAU,GAAG,SAAbA,UAAa;IAAA,OAASrB,OAAO,CAACsB,IAAI,CAACC,KAAL,CAAWlF,IAAI,GAAG,EAAlB,CAAD,CAAhB,SAA2C2D,OAAO,CAAC3D,IAAI,GAAG,EAAR,CAAlD;GAAnB;;;;;;;;;EAQA,IAAMmF,OAAO,GAAG,SAAVA,OAAU;IACd,IAAMC,iBAAiB,GAAGlF,KAAK,GAAGT,iBAAS,CAAC4F,IAAb,GAAoB5F,iBAAS,CAACyE,KAA7D;IAEA,OAAOD,SAAS,KAAKmB,iBAAd,GAAkC,GAAlC,GAAwC,EAA/C;GAHF;;;;;;;;;EAYA,IAAME,2BAA2B,GAAG,SAA9BA,2BAA8B;IAClC,IAAMC,WAAW,GAAGlF,OAAO,CAACH,KAAD,CAAP,MAAoBiE,OAAO,KAAKzE,eAAO,CAAC0E,IAAxC,IAAgD,IAAhD,GAAuD,MAA3E;IAEA,uBAAqBe,OAAO,EAA5B,GAAiCI,WAAjC;GAHF;;;;;;EASA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;IAC1B,IAAId,OAAO,IAAI,IAAf,EAAqB;MAAE;;;IAEvB,IAAIA,OAAJ,EAAa;MACX,IAAIxE,KAAJ,EAAW;QACTe,OAAO;OADT,MAEO;QACLP,KAAK;;KAJT,MAMO;MACLK,IAAI;;GAVR;;EAcA,SAAS0E,cAAT,CAAwBC,OAAxB;IACE,IAAIC,CAAC,GAAGV,IAAI,CAACC,KAAL,CAAWQ,OAAO,IAAI,OAAO,EAAX,CAAlB,CAAR;IACA,IAAIE,CAAC,GAAGX,IAAI,CAACC,KAAL,CAAWQ,OAAO,IAAI,OAAO,EAAX,CAAP,GAAwB,IAAnC,CAAR;IACA,IAAIG,CAAC,GAAGZ,IAAI,CAACC,KAAL,CAAWQ,OAAO,GAAG,IAAV,GAAiB,EAA5B,CAAR;IACA,IAAII,CAAC,GAAGb,IAAI,CAACC,KAAL,CAAWQ,OAAO,GAAG,EAArB,CAAR;IAEA,IAAIK,QAAQ,GAAGJ,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,QAAT,GAAoB,SAAxB,CAAT,GAA8C,EAA7D;IACA,IAAIK,QAAQ,GAAGJ,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,SAAT,GAAqB,UAAzB,CAAT,GAAgD,EAA/D;IACA,IAAIK,QAAQ,GAAGJ,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,WAAT,GAAuB,YAA3B,CAAT,GAAoD,EAAnE;IACA,IAAIK,QAAQ,GAAGJ,CAAC,GAAG,CAAJ,GAAQA,CAAC,IAAIA,CAAC,IAAI,CAAL,GAAS,SAAT,GAAqB,UAAzB,CAAT,GAAgD,EAA/D;IACA,OAAOC,QAAQ,GAAGC,QAAX,GAAsBC,QAAtB,GAAiCC,QAAxC;;;EAGF1F,eAAS,CAACgF,mBAAD,EAAsB,CAACd,OAAD,CAAtB,CAAT;EAEA,OACEyB,eAACC;IACCC,SAAS,EAAExB,MAAM,CAAClD;kBACNwB;IACZmD,OAAO,EAAEpG,KAAK,GAAGa,IAAH,GAAUL;cAExB6F;MACEF,SAAS,EAAEvB,EAAE,CACXD,MAAM,CAAC/C,iBADI,iBAER+C,MAAM,CAACrB,QAFC,IAEU,CAACxD,IAAD,IAASmE,OAAO,KAAKzE,eAAO,CAAC8G,KAFvC;iBAKbD,gBAACE;QACCJ,SAAS,EAAExB,MAAM,CAACrC;QAClBc,QAAQ,EAAEA;QACV9B,KAAK,EAAE8C;mBAEN,CAACnB,KAAK,IAAKoB,UAAU,IAAI,CAACrE,KAAzB,IAAmC,CAACF,IAArC,KACCmG,eAACO;UACCL,SAAS,EAAExB,MAAM,CAAC1B;UAClBwD,EAAE,EAAE;YACFC,SAAS,EAAExG,SAAS,IAAIqE,YAAb,GAA4BzD,SAA5B,GAAwC;;oBAGpD,CAACZ,SAAD,IAAcmE,UAAd,GAA2BA,UAA3B,GAAwCpB;YAG7CgD,eAACU;UACC5C,SAAS,EAAC;UACV6C,OAAO,EAAE;YAAEC,KAAK,EAAE,GAAT;YAAcC,IAAI,EAAE;;UAC7B,MAAIvC,YAAY,IAAIrE;UACpB6G,YAAY;UACZC,aAAa;oBAEbf,eAACO;YAAWL,SAAS,EAAExB,MAAM,CAAC7E;sBAC3B2E,cAAc,GAAGc,cAAc,CAACzF,IAAD,CAAjB,GAA0BgF,UAAU;;;UAIzDmB;QACEE,SAAS,EAAEvB,EAAE,CACXD,MAAM,CAACzC,QADI,mBAERyC,MAAM,CAACrB,QAFC,IAEU,CAACxD,IAAD,IAASmE,OAAO,KAAKzE,eAAO,CAAC0E,IAFvC;QAIb+C,KAAK,EAAE;UACLP,SAAS,EAAEtB,2BAA2B,EADjC;UAEL/B,UAAU,EAAErD,KAAK,kBAAgBN,QAAhB,mBAAwCoB;;;;IA9CnE;AAoDD,CA/I+B,CAAhC;;;;;"}